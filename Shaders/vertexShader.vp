#version 400 core

in vec3 position;
in vec3 normal;
in vec2 texCoord;
in vec3 tangent;

out vec2 pass_textureCoords;
out vec3 lightVector[4];
out vec3 camVector;
out float fog;
out vec4 shadowCoords;

uniform mat4 Model;
uniform mat4 View;
uniform mat4 Projection;
uniform mat4 LightSpaceMatrix;

uniform vec3 LightPosition[4];
uniform float FogDensity=0.005;
uniform vec4 ClipPlane;

void main(void){
	vec4 worldSpace = Model* vec4(position,1.0);
	gl_ClipDistance[0] = dot(worldSpace,ClipPlane);
	vec4 viewSpace = View * worldSpace;
	gl_Position = Projection * viewSpace;

	shadowCoords = LightSpaceMatrix * worldSpace;

	pass_textureCoords = texCoord;
	vec3 vertexNormal = (Model* vec4(normal,0.0)).xyz;

	vec3 normal_up = normalize(vertexNormal);
	vec3 normal_tan = normalize((Model* vec4(tangent,0.0)).xyz);
	vec3 normal_bitan = normalize(cross(normal_up,normal_tan));

	mat3 tangentSpace = mat3(
		normal_up.x,normal_tan.x,normal_bitan.x,
		normal_up.y,normal_tan.y,normal_bitan.y,
		normal_up.z,normal_tan.z,normal_bitan.z
	);

	for(int i=0;i<4;i++){
		lightVector[i] = tangentSpace *(LightPosition[i] - worldSpace.xyz);
	}
	vec4 camPos = inverse(View) * vec4(0,0,0,1);
	camVector = tangentSpace* normalize(camPos.xyz - worldSpace.xyz);

	float distance = length(viewSpace.xyz);
	fog = clamp(1.0/exp(pow(distance*FogDensity,2)),0.0,1.0);
}